#!/usr/bin/python

# CU CS5525
# Fall 2012
# Python Compiler
#
# test-benchmark-matrixmult.py
# Test Case
# Subset: benchmark
# Type: Student
# Tesing: benchmark
#
# Repository:
#    https://github.com/asayler/CU-CS5525-PythonCompiler
#
# By :
#    Anne Gatchell
#       http://annegatchell.com/
#    Andy Sayler
#       http://www.andysayler.com
#    Michael (Mike) Vitousek
#       http://csel.cs.colorado.edu/~mivi2269/

def times(a, b):
    def times_intern(m, n, i):
        if i == n:
            return 0
        else:
            return m + times_intern(m, n, i + 1)
    return times_intern(a, b, 0)

def square_matrix_multiply(a, b, len, ans):
    i = 0
    while i != len:
        j = 0
        while j != len:
            k = 0
            sum = 0
            while k != len:
                ai = a[i]
                bk = b[k]
                sum = sum + times(ai[k], bk[j])
                k = k + 1
            ansi = ans[i]
            ansi[j] = sum
            j = j + 1
        i = i + 1

#vA = [[1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94],
#      [1,4,3,65,3,34,76,32,6,4,453,22,2,44,94,453,22,2,44,94]]

lA = [[1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4]]

lB = [[1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4]]

lAB = [[1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4],
      [1,4,3,65,3,34,76,32,6,4]]

mA = [[1,4,3,65,3,34], 
      [1,4,3,65,3,34], 
      [1,4,3,65,3,34], 
      [1,4,3,65,3,34], 
      [1,4,3,65,3,34]]

mB = [[1,4,3,65,3,34], 
      [1,4,3,65,3,34], 
      [1,4,3,65,3,34], 
      [1,4,3,65,3,34], 
      [1,4,3,65,3,34]]

mAB = [[1,4,3,65,3,34], 
      [1,4,3,65,3,34], 
      [1,4,3,65,3,34], 
      [1,4,3,65,3,34], 
      [1,4,3,65,3,34]]


sA = [[1,4,3,65], 
      [1,4,3,65], 
      [1,4,3,65]]

sB = [[1,4,3,65], 
      [1,4,3,65], 
      [1,4,3,65]]

sAB = [[1,4,3,65], 
      [1,4,3,65], 
      [1,4,3,65]]

c = 0
while c != 100:
    c = c + 1
    square_matrix_multiply(sA, sB, 3, sAB)
    print sAB
    square_matrix_multiply(mA, mB, 5, mAB)
    print mAB
    square_matrix_multiply(lA, lB, 10, lAB)
    print lAB
#square_matrix_multiply(vA, vB, 20, vAB)
#print vAB
